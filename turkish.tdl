;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Turkish
;;; created at:
;;;     Thu Apr 27 07:33:44 UTC 2017
;;; based on Matrix customization system version of:
;;;     Tue Apr 25 03:52:37 UTC 2017
;;;
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; THIS WEEK:
; - fixed _pron_n_rel to pron_rel ... dumb
; - still need to fix predicate pp semantics
; - still need to allow for some acc-tr verbs (yemek) to drop the object

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

;individual :+ [ E tam,
;                SF iforce,
;                COG-ST cog-st,
;                SPECI bool ].

;; TODO: this generalization makes coordination work, but uhhh...
;+nvp :+ [ CASE case,
+nvjrp :+ [ CASE case,
            CASE-MARKED bool ].

head :+ [ PRD bool,
          FORM form,
          AUX bool,
          RAISED bool,
          PRON bool,
          PRE-SPEC bool,
          PRE-SPR bool,
          PRE-COMPS bool,
          PRE-SUBJ bool,
          NEG bool ].

inflected :+ [ NUMBER-FLAG luk,
               ROLE-FLAG luk,
               TENSE-FLAG luk,
               ASPECT-FLAG luk,
               CASE-FLAG luk,
               AGREEMENT-FLAG luk,
               POLARITY-FLAG luk ].

infl-satisfied :+ [ NUMBER-FLAG na-or-+,
                    ROLE-FLAG na-or-+,
                    TENSE-FLAG na-or-+,
                    ASPECT-FLAG na-or-+,
                    CASE-FLAG na-or-+,
                    AGREEMENT-FLAG na-or-+,
                    POLARITY-FLAG na-or-+ ].

png :+ [ PER person,
         NUM number ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].
basic-head-opt-subj-phrase :+ [ SYNSEM.LOCAL.CAT.HEAD.RAISED - ].

; We can't just use the V-final and V-initial word
; order modules together to get a good free word order
; module. The root of the problem seems to be that we
; need the subject to be able to attach inside the
; object(s) for VSO and OSV, but at the same time, we
; don't want complete flexibility on order of attachment
; when the verb is in the middle -- that would give
; spurious ambiguity.  This solution adopts the xmod
; hierarchy to enforce right-first attachment.  That is,
; all arguments appears to the right of the verb must
; attach before all arguments appearing to the left.  The
; linguistic prediction of this analysis is that free
; word order languages do not have a consistent VP
; consituent, even when the verb and object are adjacent
; (OV order).  Using a separate feature for tracking
; argument attachment (as opposed to modifier
; attachment).  We might be able to collapse these one
; day, but that's not obvious.

synsem :+ [ ATTACH xmod ].

; We'll need to add identification of ATTACH between
; mother and head-daughter for all other kinds of phrases
; if we do this.  Just for illustration, I'm putting it
; in for head-adjunct phrases here:

head-mod-phrase :+ [ SYNSEM.ATTACH #attach,
                     HEAD-DTR.SYNSEM.ATTACH #attach ].

; NOTE: Gave head-adj more of the traits adj-head has that was causing it to misbehave

head-adj-phrase :+
  [ SYNSEM [ LOCAL.CAT.POSTHEAD #ph,
             MODIFIED rmod & [ PERIPH #periph ],
                               LIGHT #light ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT.POSTHEAD #ph,
                      LIGHT #light ],
    NON-HEAD-DTR.SYNSEM [ LOCAL.CAT [ VAL.COMPS < >,
                                      POSTHEAD + ],
                          NON-LOCAL [ SLASH 0-dlist,
                                      REL 0-dlist,
                                      QUE 0-dlist ],
                          MODIFIED.PERIPH #periph ] ].

;;; Demonstrative relations

demonstrative_a_rel := predsort.
proximal+dem_a_rel := demonstrative_a_rel. ; close to speaker
distal+dem_a_rel := demonstrative_a_rel.   ; away from speaker
remote+dem_a_rel := distal+dem_a_rel.      ; away from speaker and hearer
hearer+dem_a_rel := distal+dem_a_rel.      ; near hearer

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nom
acc := case.  ; acc
dat := case.  ; dat
abl := case.  ; abl
gen := case.  ; gen
loc := case.  ; loc
com := case.  ; com

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
sg := number.
pl := number.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

nonpast := tense.
past := tense.

;;; Aspect

perfective := aspect.
imperfective := aspect.
habitual := aspect.
prospective := aspect.

;;; Evidentiality

evid := sort.
tam :+ [ EVID evid ].

direct := evid.
indirect := evid.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

proper-noun-lex := norm-hook-lex-item & basic-icons-lex-item & number-rule-dtr &
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun & [ PRON -,
                                         MOD < > ],
                           VAL [ SPR < >,
                                 SUBJ < >,
                                 COMPS < >,
                                 SPEC < > ] ],
             CONT [ HOOK.INDEX.PNG.PER 3rd,
                    RELS <! named-relation &
                            [ LBL #larg,
                              ARG0 #ind & ref-ind ],
                            [ PRED "exist_q_rel",
                              ARG0 #ind,
                              RSTR #harg ] !>,
                    HCONS <! [ HARG #harg,
                               LARG #larg ] !> ] ],
             NON-LOCAL [ SLASH 0-dlist, REL 0-dlist, QUE 0-dlist ] ] ].

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM [ LOCAL.CAT.VAL [ SPR < #spr &
                                   [ LOCAL.CAT.HEAD det ] >,
                             COMPS < >,
                             SUBJ < >,
                             SPEC < > ],
             NON-LOCAL [ SLASH 0-dlist, REL 0-dlist, QUE 0-dlist ] ],
    ARG-ST < #spr > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

common-noun-lex := noun-lex & number-rule-dtr &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.PER 3rd,
                   CAT.HEAD.PRON - ] ].

personal-pronoun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX [ COG-ST type-id,
                                     SPECI + ],
                   CAT.HEAD.PRON + ] ].

wh-pronoun-lex := norm-hook-lex-item & basic-icons-lex-item & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun & [ PRON + ],
                           VAL [ SPR < >,
                                 SUBJ < >,
                                 COMPS < >,
                                 SPEC < > ] ],
             CONT [ HOOK.INDEX.PNG.PER 3rd,
                    RELS <! [ LBL #larg,
                              ARG0 #ind & ref-ind ],
                            [ PRED "wh_q_rel",
                              ARG0 #ind,
                              RSTR #harg ] !>,
                    HCONS <! [ HARG #harg,
                               LARG #larg ] !> ] ],
             NON-LOCAL.QUE <! #ind !> ] ].

1sg-pronoun-noun-lex := personal-pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                       NUM sg ] ].

nom-1sg-pronoun-noun-lex := 1sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

acc-1sg-pronoun-noun-lex := 1sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE acc,
                            CASE-MARKED + ] ].

dat-1sg-pronoun-noun-lex := 1sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE dat,
                            CASE-MARKED + ] ].

abl-1sg-pronoun-noun-lex := 1sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE abl,
                            CASE-MARKED + ] ].

gen-1sg-pronoun-noun-lex := 1sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

loc-1sg-pronoun-noun-lex := 1sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE loc,
                            CASE-MARKED + ] ].

com-1sg-pronoun-noun-lex := 1sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE com,
                            CASE-MARKED + ] ].

1pl-pronoun-noun-lex := personal-pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                       NUM pl ] ].

nom-1pl-pronoun-noun-lex := 1pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

acc-1pl-pronoun-noun-lex := 1pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE acc,
                            CASE-MARKED + ] ].

dat-1pl-pronoun-noun-lex := 1pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE dat,
                            CASE-MARKED + ] ].

abl-1pl-pronoun-noun-lex := 1pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE abl,
                            CASE-MARKED + ] ].

gen-1pl-pronoun-noun-lex := 1pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

loc-1pl-pronoun-noun-lex := 1pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE loc,
                            CASE-MARKED + ] ].

com-1pl-pronoun-noun-lex := 1pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE com,
                            CASE-MARKED + ] ].

2sg-pronoun-noun-lex := personal-pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                       NUM sg ] ].

nom-2sg-pronoun-noun-lex := 2sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

acc-2sg-pronoun-noun-lex := 2sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE acc,
                            CASE-MARKED + ] ].

dat-2sg-pronoun-noun-lex := 2sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE dat,
                            CASE-MARKED + ] ].

abl-2sg-pronoun-noun-lex := 2sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE abl,
                            CASE-MARKED + ] ].

gen-2sg-pronoun-noun-lex := 2sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

loc-2sg-pronoun-noun-lex := 2sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE loc,
                            CASE-MARKED + ] ].

com-2sg-pronoun-noun-lex := 2sg-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE com,
                            CASE-MARKED + ] ].

2pl-pronoun-noun-lex := personal-pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                       NUM pl ] ].

nom-2pl-pronoun-noun-lex := 2pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

acc-2pl-pronoun-noun-lex := 2pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE acc,
                            CASE-MARKED + ] ].

dat-2pl-pronoun-noun-lex := 2pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE dat,
                            CASE-MARKED + ] ].

abl-2pl-pronoun-noun-lex := 2pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE abl,
                            CASE-MARKED + ] ].

gen-2pl-pronoun-noun-lex := 2pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

loc-2pl-pronoun-noun-lex := 2pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE loc,
                            CASE-MARKED + ] ].

com-2pl-pronoun-noun-lex := 2pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE com,
                            CASE-MARKED + ] ].

3sgpl-pronoun-noun-lex := personal-pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

nom-3sgpl-pronoun-noun-lex := 3sgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

acc-3sgpl-pronoun-noun-lex := 3sgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE acc,
                            CASE-MARKED + ] ].

dat-3sgpl-pronoun-noun-lex := 3sgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE dat,
                            CASE-MARKED + ] ].

abl-3sgpl-pronoun-noun-lex := 3sgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE abl,
                            CASE-MARKED + ] ].

gen-3sgpl-pronoun-noun-lex := 3sgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

loc-3sgpl-pronoun-noun-lex := 3sgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE loc,
                            CASE-MARKED + ] ].

com-3sgpl-pronoun-noun-lex := 3sgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE com,
                            CASE-MARKED + ] ].

3pl-pronoun-noun-lex := personal-pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                       NUM pl ] ].

nom-3pl-pronoun-noun-lex := 3pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

acc-3pl-pronoun-noun-lex := 3pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE acc,
                            CASE-MARKED + ] ].

dat-3pl-pronoun-noun-lex := 3pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE dat,
                            CASE-MARKED + ] ].

abl-3pl-pronoun-noun-lex := 3pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE abl,
                            CASE-MARKED + ] ].

gen-3pl-pronoun-noun-lex := 3pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

loc-3pl-pronoun-noun-lex := 3pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE loc,
                            CASE-MARKED + ] ].

com-3pl-pronoun-noun-lex := 3pl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE com,
                            CASE-MARKED + ] ].

whsgpl-pronoun-noun-lex := wh-pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

nom-whsgpl-pronoun-noun-lex := whsgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

acc-whsgpl-pronoun-noun-lex := whsgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE acc,
                            CASE-MARKED + ] ].

dat-whsgpl-pronoun-noun-lex := whsgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE dat,
                            CASE-MARKED + ] ].

abl-whsgpl-pronoun-noun-lex := whsgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE abl,
                            CASE-MARKED + ] ].

gen-whsgpl-pronoun-noun-lex := whsgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

loc-whsgpl-pronoun-noun-lex := whsgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE loc,
                            CASE-MARKED + ] ].

com-whsgpl-pronoun-noun-lex := whsgpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE com,
                            CASE-MARKED + ] ].

whpl-pronoun-noun-lex := wh-pronoun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                       NUM pl ] ].

nom-whpl-pronoun-noun-lex := whpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

acc-whpl-pronoun-noun-lex := whpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE acc,
                            CASE-MARKED + ] ].

dat-whpl-pronoun-noun-lex := whpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE dat,
                            CASE-MARKED + ] ].

abl-whpl-pronoun-noun-lex := whpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE abl,
                            CASE-MARKED + ] ].

gen-whpl-pronoun-noun-lex := whpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

loc-whpl-pronoun-noun-lex := whpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE loc,
                            CASE-MARKED + ] ].

com-whpl-pronoun-noun-lex := whpl-pronoun-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE com,
                            CASE-MARKED + ] ].

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

replacement-transitive-lex-item := basic-two-arg & basic-icons-lex-item &
  [ ARG-ST < [ LOCAL.CONT.HOOK [ INDEX ref-ind & #ind1,
                                 ICONS-KEY.IARG1 #clause ] ],
             [ LOCAL.CONT.HOOK [ INDEX ref-ind & #ind2,
                                 ICONS-KEY.IARG1 #clause ] ] >,
    SYNSEM [ LKEYS.KEYREL [ ARG1 #ind1,
                            ARG2 #ind2 ],
             LOCAL.CONT.HOOK.CLAUSE-KEY #clause ] ].

replacement-basic-verb-lex := basic-verb-lex-super &
  [ SYNSEM [ LOCAL.CONT.HOOK.INDEX #index,
             LKEYS.KEYREL event-relation & [ ARG0 #index ] ] ].

ordinary-verb-lex := single-rel-lex-item & norm-hook-lex-item & no-hcons-lex-item.

main-verb-lex := verb-lex & replacement-basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT [ VAL [ SPR < >,
                                       COMPS < > ],
                                 HEAD +nvp ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex & tense-verb-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item & ordinary-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

itr-verb-lex := intransitive-verb-lex & polarity-verb-rule-dtr.

transitive-verb-lex := main-verb-lex & replacement-transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD.CASE-MARKED + ] ] > ].

single-rel-tr-verb-lex := transitive-verb-lex & ordinary-verb-lex.

multiple-rel-tr-verb-lex := transitive-verb-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPR < >,
                                 SPEC < >,
                                 SUBJ < #subj >,
                                 COMPS < #comp > ] ],
                     CONT [ HOOK [ LTOP #nh,
                                   INDEX #s,
                                   XARG #xarg ],
                                   RELS <!
                                           #cop &
                                           [ LBL #h,
                                             ARG0 #s,
                                             ARG1 #xarg,
                                             ARG2 #compindex ],
                                           #neg & event-relation &
                                           [ LBL #nh,
                                             ARG1 #scopehandle ]
                                        !>,
                                   HCONS <! qeq &
                                            [ HARG #scopehandle,
                                              LARG #h ] !> ] ],
             LKEYS [ KEYREL #cop,
                     ALTKEYREL #neg ] ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD +nvp,
                             VAL [ SPR < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comp &
             [ LOCAL [ CAT [ HEAD +nvp,
                             VAL [ SPR < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #compindex ] ] > ].

acc-tr-verb-lex := single-rel-tr-verb-lex & polarity-verb-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST [ LOCAL.CAT.HEAD [ CASE acc,
                                                          CASE-MARKED + ]]]].
										 
opt-acc-tr-verb-lex := acc-tr-verb-lex &
	[ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [OPT +,
                                         OPT-CS type-id ]].

req-acc-tr-verb-lex := acc-tr-verb-lex &
	[ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT - ].

dat-tr-verb-lex := single-rel-tr-verb-lex & polarity-verb-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST [ LOCAL.CAT.HEAD [ CASE dat,
                                                          CASE-MARKED + ],
                                         OPT +,
                                         OPT-CS type-id ] ] ].

abl-tr-verb-lex := single-rel-tr-verb-lex & polarity-verb-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST [ LOCAL.CAT.HEAD [ CASE abl,
                                                          CASE-MARKED + ],
                                         OPT +,
                                         OPT-CS type-id ] ] ].

loc-tr-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST [ LOCAL.CAT.HEAD [ CASE loc,
                                                          CASE-MARKED + ] ] ] ].

regular-loc-tr-verb-lex := loc-tr-verb-lex & single-rel-tr-verb-lex & polarity-verb-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST [ OPT +,
                                       OPT-CS type-id ] ].

copular-loc-tr-verb-lex := loc-tr-verb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.OPT -,
                       HEAD.PRE-COMPS - ] ].

positive-loc-tr-verb-lex := copular-loc-tr-verb-lex & single-rel-tr-verb-lex & polarity-verb-rule-dtr.

negative-loc-tr-verb-lex := copular-loc-tr-verb-lex & multiple-rel-tr-verb-lex & tense-verb-rule-dtr.

com-tr-verb-lex := single-rel-tr-verb-lex & polarity-verb-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS.FIRST [ LOCAL.CAT.HEAD [ CASE com,
                                                          CASE-MARKED + ],
                                         OPT +,
                                         OPT-CS type-id ] ] ].

nom-tr-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ COMPS.FIRST [ LOCAL.CAT.HEAD [ CASE nom,
                                                            CASE-MARKED + ],
                                           OPT - ] ],
                       HEAD.PRE-COMPS - ] ].

positive-nom-tr-verb-lex := nom-tr-verb-lex & single-rel-tr-verb-lex & polarity-verb-rule-dtr.

negative-nom-tr-verb-lex := nom-tr-verb-lex & multiple-rel-tr-verb-lex & tense-verb-rule-dtr.

clausal-comp-verb-lex := main-verb-lex & clausal-second-arg-trans-lex-item &
                         single-rel-lex-item & norm-hook-lex-item & polarity-verb-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS < #comps & 
                                   [ LOCAL.CAT [ HEAD +vc,
                                                 VAL [ SUBJ < >,
                                                       COMPS < > ] ] ] > ],
    ARG-ST.REST.FIRST #comps ].

sentential-comp-verb-lex := clausal-comp-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD verb ].

declarative-comp-verb-lex := clausal-comp-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD comp,
                                             CONT.HOOK.INDEX.SF prop ] ].

interrogative-comp-verb-lex := clausal-comp-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL [ CAT.HEAD comp,
                                             CONT.HOOK.INDEX.SF ques ] ].

;;; ???

no-obj-drop-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.OPT - ].

obj-drop-verb-lex := transitive-verb-lex.

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD +nvp & [ CASE nom ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < unexpressed >,
                                 COMPS < > ],
                           HEAD [ FORM nonfinite, RAISED + ] ] ] > ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item &
  [ ARG-ST < [ ],
             [ LOCAL.CAT.HEAD.AUX - ] > ].

interrogative-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM [ LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ FORM nonfinite, RAISED + ],
                   CONT.HOOK.INDEX.SF ques ],
             NON-LOCAL [ SLASH 0-dlist, REL 0-dlist, QUE 0-dlist ] ] ].

;;; Copulas

replacement-raise-sem-lex-item := lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK #hook,
                   CAT.VAL.COMPS < [ LOCAL.CONT.HOOK #hook ] , ... > ] ].

replacement-trans-first-arg-raising-lex-item-2 := trans-first-arg-raising-lex-item &
                                                  replacement-raise-sem-lex-item &
                                                  no-icons-lex-item &
  [ ARG-ST < [ LOCAL.CONT.HOOK.ICONS-KEY.IARG1 #clause ],
             [ LOCAL.CONT.HOOK.CLAUSE-KEY #clause ] > ].

cop-lex := basic-verb-lex-super & replacement-trans-first-arg-raising-lex-item-2 &
           non-mod-lex-item &
  [ SYNSEM.LOCAL [ CAT [ VAL [ SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                              CAT [ VAL [ SPR < >,
                                                          COMPS < > ],
                                                    HEAD #head ] ] ] >,
                             COMPS < [ LOCAL.CAT [ HEAD [ PRD +,
                                                          FORM nonfinite, RAISED + ],
                                                   VAL [ SUBJ < [ LOCAL.CAT.HEAD #head ] >,
                                                         COMPS < > ] ] ] >,
                             SPR < >,
                             SPEC < > ],
                         HEAD.PRE-COMPS - ],
                   CONT.HOOK.XARG #xarg ] ].

; Copula type taking adjectival complements.
; Need to define more for additional complement types.

adj-comp-copula-verb-lex := cop-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.AUX -,
                           VAL [ SPR < >,
                                 SPEC < >,
                                 SUBJ < #subj >,
                                 COMPS < #comp > ] ],
                     CONT.HOOK.XARG #xarg ] ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SPR < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comp &
             [ LOCAL [ CAT [ HEAD +jp,
                             VAL [ COMPS < > ] ] ] ] > ].

positive-copula-cop-lex := adj-comp-copula-verb-lex & polarity-verb-rule-dtr &
  [ SYNSEM.LOCAL.CONT [ RELS <! !>, HCONS <! !> ] ].

negative-copula-cop-lex := adj-comp-copula-verb-lex & tense-verb-rule-dtr &
  [ SYNSEM [ LOCAL.CONT [ HOOK.LTOP #nh,
                          RELS <! #neg & event-relation &
                                  [ ARG1 #scopehandle ] !>,
                          HCONS <! qeq &
                                   [ HARG #scopehandle,
                                     LARG #nh ] !> ],
             LKEYS.KEYREL #neg ] ].

;;; Adjectives

adj-lex := basic-intersective-adjective-lex & no-hcons-lex-item &
  [ SYNSEM.NON-LOCAL [ SLASH 0-dlist, REL 0-dlist, QUE 0-dlist ] ].

basic-adjective-adj-lex := adj-lex & basic-adjective-role-rule-dtr.

;;; Others

;;; Case-marking adpositions
;;; Case marking adpositions are constrained not to
;;; be modifiers.

case-marking-adp-lex := basic-one-arg & raise-sem-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD adp & [ CASE #case,
                                    MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comps >,
                             SPEC < > ] ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ VAL.SPR < >,
                           HEAD noun &
                                [ CASE #case,
                                  CASE-MARKED - ] ] ] > ].

;;; Determiners

determiner-lex-supertype := norm-hook-lex-item &
                            norm-zero-arg &
                            no-icons-lex-item &
  [ SYNSEM [ LOCAL [ CAT [ HEAD det & [ PRE-SPEC +,
                                        MOD < > ],
                           VAL [ SPEC.FIRST.LOCAL.CONT.HOOK [ INDEX #ind,
                                                              LTOP #larg ],
                                 SPR < >,
                                 SUBJ < >,
                                 COMPS < > ] ],
             CONT.HCONS <! qeq &
                            [ HARG #harg,
                              LARG #larg ] !> ],
         LKEYS.KEYREL quant-relation &
           [ ARG0 #ind,
             RSTR #harg ] ] ].

;;; Demonstrative determiners

demonstrative-determiner-lex := determiner-lex-supertype &
  [ SYNSEM
     [ LKEYS.ALTKEYREL #evrel,
       LOCAL [ CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK [ INDEX #ind & [ COG-ST activ+fam,
                                                                   SPECI + ],
                                                    LTOP #ltop ],
               CONT.RELS <! [ PRED "exist_q_rel" ],
                            #evrel & arg1-ev-relation & [ LBL #ltop,
                                                          ARG1 #ind ] !> ] ] ].

;;; Ordinary determiners

ordinary-determiner-lex := determiner-lex-supertype & single-rel-lex-item.

definite-determiner-lex := ordinary-determiner-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX [ COG-ST uniq+fam+act, SPECI + ] ].

indefinite-determiner-lex := ordinary-determiner-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.COG-ST type-id ].

sgpl-definite-determiner-lex := definite-determiner-lex.

pl-definite-determiner-lex := definite-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

sg-indefinite-determiner-lex := indefinite-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

pl-indefinite-determiner-lex := indefinite-determiner-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

;;; Adverbs

intersective-mod-phrase := unary-phrase &
  [ SYNSEM [ LOCAL.CAT.HEAD.MOD < [ LOCAL intersective-mod & 
                                          [ CONT.HOOK.INDEX #ind ] ] >,
             LKEYS.KEYREL.ARG1 #ind ],
    C-CONT [ HOOK.XARG #ind,
             HCONS <! !> ] ].

adverbial-locative-phrase := intersective-mod-phrase &
  [ SYNSEM [ LOCAL.CAT [ HEAD adp & [ MOD < [ LOCAL intersective-mod &
                                                    [ CAT [ HEAD verb,
                                                            VAL.COMPS < > ] ] ] > ],
                         VAL [ COMPS < >,
                               SUBJ < >, 
                               SPR < >,
                               SPEC < > ] ] ],
    C-CONT [ HOOK [ LTOP #ltop,
                    INDEX #index,
                    XARG #xarg ],
             RELS <! arg12-ev-relation &
                     [ PRED "_loc_p_rel",
                       LBL #ltop,
                       ARG0 #index,
                       ARG1 #xarg,
                       ARG2 #dtr ] !>,
             HCONS <! !>  ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD noun & [CASE loc],
                                  VAL.SPR < > ],
                            COORD -,
                            CONT.HOOK [ INDEX #dtr ] ] ] > ].

adverb-lex := basic-adverb-lex & intersective-mod-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT.HEAD verb ] >,
                           VAL [ SPR < >,
                                 SUBJ < >,
                                 COMPS < >,
                                 SPEC < > ] ] ] ] ].

manner-adverb-adv-lex := adverb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT.VAL.COMPS < > ] > ].

;;; Complementizers

complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp & [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

declarative-complementizer-lex := complementizer-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF prop ].

interrogative-complementizer-lex := complementizer-lex-item &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.SF ques ].

cp-init-complementizer-lex := complementizer-lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.PRE-COMPS + ].

cp-final-complementizer-lex := complementizer-lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.PRE-COMPS - ].

cp-init-declarative-complementizer-lex := declarative-complementizer-lex &
                                          cp-init-complementizer-lex.

cp-final-declarative-complementizer-lex := declarative-complementizer-lex &
                                           cp-final-complementizer-lex.

cp-final-interrogative-complementizer-lex := interrogative-complementizer-lex &
                                             cp-final-complementizer-lex.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

attr-pp-lex-rule := add-only-no-ccont-rule &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOD < [ LOCAL intersective-mod &
                                          [ CONT.HOOK.INDEX #xarg,
                                            CAT [ HEAD verb,
                                                  VAL.SPR cons ] ] ] >,
                   CONT.HOOK.XARG #xarg ] ].

; Basic attributive adjective lexical rule definition

attr-adj-lex-rule := add-only-no-ccont-rule &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOD < [ LOCAL intersective-mod &
                                          [ CONT.HOOK.INDEX #xarg,
                                            CAT [ HEAD noun,
                                                  VAL.SPR cons ] ] ] >,
                   CONT.HOOK.XARG #xarg ] ].

; Stative predicate adjective lexical rule definition

stative-pred-lex-rule := add-only-no-ccont-rule &
  [ SYNSEM.LOCAL [ CAT [ HEAD.PRE-SUBJ -,
                         VAL.SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                              CAT [ VAL [ SPR < >,
                                                          COMPS < > ],
                                                    HEAD +nvp & [ CASE nom ] ] ] ] > ],
                   CONT.HOOK.XARG #xarg ] ].

;;; Intermediate rule types

number-rule-dtr := word-or-lexrule.
poss-rule-dtr := word-or-lexrule.
case-rule-dtr := word-or-lexrule.
polarity-verb-rule-dtr := word-or-lexrule.
tense-verb-rule-dtr := word-or-lexrule.
aspect-verb-rule-dtr := word-or-lexrule.
agreement-verb-rule-dtr := word-or-lexrule.
basic-adjective-role-rule-dtr := word-or-lexrule.
tense-adjective-rule-dtr := word-or-lexrule.
agreement-adjective-rule-dtr := word-or-lexrule.

number-rule-dtr :+ [ INFLECTED.NUMBER-FLAG - ].
case-rule-dtr :+ [ INFLECTED.CASE-FLAG - ].
polarity-verb-rule-dtr :+ [ INFLECTED.POLARITY-FLAG - ].
tense-verb-rule-dtr :+ [ INFLECTED.TENSE-FLAG - ].
aspect-verb-rule-dtr :+ [ INFLECTED.ASPECT-FLAG - ].
agreement-verb-rule-dtr :+ [ INFLECTED.AGREEMENT-FLAG - ].
basic-adjective-role-rule-dtr :+ [ INFLECTED.ROLE-FLAG - ].
tense-adjective-rule-dtr :+ [ INFLECTED.TENSE-FLAG - ].
agreement-adjective-rule-dtr :+ [ INFLECTED.AGREEMENT-FLAG - ].

;;; Lexical rule types

;;; Number

number-lex-rule-super := add-only-no-ccont-rule & case-rule-dtr & poss-rule-dtr &
  [ INFLECTED [ NUMBER-FLAG +,
                ROLE-FLAG #role-flag,
                TENSE-FLAG #tense-flag,
                ASPECT-FLAG #aspect-flag,
                AGREEMENT-FLAG #agreement-flag,
                CASE-FLAG #case-flag,
                POLARITY-FLAG #polarity-flag ],
    DTR number-rule-dtr &
        [ INFLECTED [ ROLE-FLAG #role-flag,
                      TENSE-FLAG #tense-flag,
                      ASPECT-FLAG #aspect-flag,
                      AGREEMENT-FLAG #agreement-flag,
                      CASE-FLAG #case-flag,
                      POLARITY-FLAG #polarity-flag ] ] ].

sg-lex-rule := const-lex-rule & number-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].

pl-lex-rule := infl-lex-rule & number-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

;;; Possession

poss-lex-rule-super := same-ctxt-lex-rule &
                       same-non-local-lex-rule &
                       same-modified-lex-rule &
                       same-light-lex-rule &
                       same-cont-lex-rule &
                       same-agr-lex-rule &
                       same-head-lex-rule &
                       same-hc-light-lex-rule &
                       same-posthead-lex-rule &
                       same-mc-lex-rule &
                       infl-lex-rule &
                       case-rule-dtr &
  [ INFLECTED #infl,
    SYNSEM [ LKEYS.ALTKEYREL.ARG0.PNG #png,
             LOCAL.CAT.VAL [ SPR < [ LOCAL [ CAT [ HEAD +nvp & [ CASE gen ] ],
                                     CONT.HOOK.INDEX #index2 ] ] >, 
                             SPEC #spec,
                             COMPS #comps,
                             SUBJ #subj ] ],
    DTR poss-rule-dtr & [ SYNSEM.LOCAL [ CONT.HOOK [ INDEX #index,
                                                                 LTOP #lbl ],
                                                     CAT.VAL [ SPEC #spec,
                                                               COMPS #comps,
                                                               SUBJ #subj ] ],
                                      INFLECTED #infl ],
    C-CONT [ HOOK [ INDEX #index,
                    LTOP #lbl ],
             RELS <! arg12-ev-relation &
                      [ PRED "poss_rel",
                        LBL #lbl,
                        ARG1 #index,
                        ARG2 #index2 & [ PNG #png ] ] !>,
             HCONS <! !>,
             ICONS <! !> ] ].

1sg-poss-lex-rule := poss-lex-rule-super &
  [ SYNSEM.LKEYS.ALTKEYREL.ARG0.PNG [ PER 1st, NUM sg ] ].

1pl-poss-lex-rule := poss-lex-rule-super &
  [ SYNSEM.LKEYS.ALTKEYREL.ARG0.PNG [ PER 1st, NUM pl ] ].

2sg-poss-lex-rule := poss-lex-rule-super &
  [ SYNSEM.LKEYS.ALTKEYREL.ARG0.PNG [ PER 2nd, NUM sg ] ].

2pl-poss-lex-rule := poss-lex-rule-super &
  [ SYNSEM.LKEYS.ALTKEYREL.ARG0.PNG [ PER 2nd, NUM pl ] ].

3sgpl-poss-lex-rule := poss-lex-rule-super &
  [ SYNSEM.LKEYS.ALTKEYREL.ARG0.PNG [ PER 3rd ] ].

3pl-poss-lex-rule := poss-lex-rule-super &
  [ SYNSEM.LKEYS.ALTKEYREL.ARG0.PNG [ PER 3rd, NUM pl ] ].

;;; Case

case-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE-FLAG +,
                ROLE-FLAG #role-flag,
                TENSE-FLAG #tense-flag,
                ASPECT-FLAG #aspect-flag,
                AGREEMENT-FLAG #agreement-flag,
                NUMBER-FLAG #number-flag,
                POLARITY-FLAG #polarity-flag ],
    DTR case-rule-dtr &
        [ INFLECTED [ ROLE-FLAG #role-flag,
                      TENSE-FLAG #tense-flag,
                      ASPECT-FLAG #aspect-flag,
                      AGREEMENT-FLAG #agreement-flag,
                      NUMBER-FLAG #number-flag,
                      POLARITY-FLAG #polarity-flag ] ] ].

nom-lex-rule := case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE nom,
                            CASE-MARKED + ] ].

spec-acc-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL [ CAT.HEAD [ CASE acc,
                              CASE-MARKED + ],
                   CONT.HOOK.INDEX.SPECI + ] ].

nonspec-acc-lex-rule := case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL [ CAT.HEAD [ CASE acc,
                              CASE-MARKED + ],
                  CONT.HOOK.INDEX.SPECI - ] ].

dat-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE dat,
                            CASE-MARKED + ] ].

abl-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE abl,
                            CASE-MARKED + ] ].

gen-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE gen,
                            CASE-MARKED + ] ].

loc-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE loc,
                            CASE-MARKED + ] ].

com-lex-rule := case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE com,
                            CASE-MARKED + ] ].

case-synth-com-lex-rule := case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ CASE com,
                            CASE-MARKED - ] ].

;;; Polarity

polarity-verb-lex-rule-super := aspect-verb-rule-dtr & lex-rule &
  [ INFLECTED [ POLARITY-FLAG +,
                ROLE-FLAG #role-flag,
                TENSE-FLAG #tense-flag,
                ASPECT-FLAG #aspect-flag,
                AGREEMENT-FLAG #agreement-flag,
                CASE-FLAG #case-flag,
                NUMBER-FLAG #number-flag ],
    DTR polarity-verb-rule-dtr &
        [ INFLECTED [ ROLE-FLAG #role-flag,
                      TENSE-FLAG #tense-flag,
                      ASPECT-FLAG #aspect-flag,
                      AGREEMENT-FLAG #agreement-flag,
                      CASE-FLAG #case-flag,
                      NUMBER-FLAG #number-flag ] ] ].

; This adds negative semantics to the verb's
; RELS list.

neg-lex-rule := cont-change-only-lex-rule & infl-lex-rule & polarity-verb-lex-rule-super &
  [ C-CONT [ HOOK [ XARG #xarg,
                    LTOP #ltop,
                    INDEX #ind ],
             RELS <! event-relation &
                     [ PRED "neg_rel",
                       LBL #ltop,
                       ARG1 #harg ] !>,
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #larg ] !> ],
    SYNSEM [ LKEYS #lkeys,
             LOCAL.CAT.HEAD.NEG + ],
    DTR.SYNSEM [ LKEYS #lkeys,
                 LOCAL [ CONT.HOOK [ XARG #xarg,
                                     INDEX #ind,
                                     LTOP #larg ],
                         CAT.HEAD verb ] ] ].

pos-lex-rule := add-only-no-ccont-rule & const-lex-rule & polarity-verb-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD.NEG - ].

;;; Aspect

participle-verb-lex-rule-super := add-only-no-ccont-rule & 
                                  case-rule-dtr & poss-rule-dtr &
  [ SYNSEM.LOCAL.CAT [ HEAD [ FORM nonfinite, RAISED - ],
                       VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE gen, CASE-MARKED + ] ],
    INFLECTED [ ASPECT-FLAG +,
                ROLE-FLAG #role-flag,
                TENSE-FLAG #tense-flag,
                AGREEMENT-FLAG #agreement-flag,
                CASE-FLAG #case-flag,
                NUMBER-FLAG #number-flag,
                POLARITY-FLAG #polarity-flag ],
    DTR aspect-verb-rule-dtr &
        [ INFLECTED [ ROLE-FLAG #role-flag,
                      TENSE-FLAG #tense-flag,
                      AGREEMENT-FLAG #agreement-flag,
                      CASE-FLAG #case-flag,
                      NUMBER-FLAG #number-flag,
                      POLARITY-FLAG #polarity-flag ] ] ].

pf-part-lex-rule := participle-verb-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

prsp-part-lex-rule := participle-verb-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT prospective ].

aspect-verb-lex-rule-super := add-only-no-ccont-rule & tense-verb-rule-dtr &
  [ INFLECTED [ ASPECT-FLAG +,
                ROLE-FLAG #role-flag,
                TENSE-FLAG #tense-flag,
                AGREEMENT-FLAG #agreement-flag,
                CASE-FLAG #case-flag,
                NUMBER-FLAG #number-flag,
                POLARITY-FLAG #polarity-flag ],
    DTR aspect-verb-rule-dtr &
        [ INFLECTED [ ROLE-FLAG #role-flag,
                      TENSE-FLAG #tense-flag,
                      AGREEMENT-FLAG #agreement-flag,
                      CASE-FLAG #case-flag,
                      NUMBER-FLAG #number-flag,
                      POLARITY-FLAG #polarity-flag ] ] ].

hab-lex-rule := aspect-verb-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT habitual ] ].

neg-hab-lex-rule := aspect-verb-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT habitual,
                   CAT.HEAD.NEG + ] ].

impf-lex-rule := aspect-verb-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT imperfective ].

direct-pf-lex-rule := aspect-verb-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ ASPECT perfective,
                                     EVID direct ] ].

indirect-pf-lex-rule := aspect-verb-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ ASPECT perfective,
                                     EVID indirect ] ].

prsp-lex-rule := aspect-verb-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT prospective ].

;;; Tense

tense-verb-lex-rule-super := add-only-no-ccont-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD [ CASE nom, CASE-MARKED + ],
    INFLECTED [ TENSE-FLAG +,
                ROLE-FLAG #role-flag,
                ASPECT-FLAG #aspect-flag,
                AGREEMENT-FLAG #agreement-flag,
                CASE-FLAG #case-flag,
                NUMBER-FLAG #number-flag,
                POLARITY-FLAG #polarity-flag ],
    DTR tense-verb-rule-dtr &
        [ INFLECTED [ ROLE-FLAG #role-flag,
                      ASPECT-FLAG #aspect-flag,
                      AGREEMENT-FLAG #agreement-flag,
                      CASE-FLAG #case-flag,
                      NUMBER-FLAG #number-flag,
                      POLARITY-FLAG #polarity-flag ] ] ].

pre-aux-lex-rule := const-lex-rule & tense-verb-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD [ FORM nonfinite, RAISED + ] ].

no-aux-lex-rule := agreement-verb-rule-dtr & tense-verb-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD [ FORM finite, RAISED - ] ].

npst-lex-rule := const-lex-rule & no-aux-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE nonpast ].

direct-pst-lex-rule := infl-lex-rule & no-aux-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE past,
                                     EVID direct ] ].

indirect-pst-lex-rule := infl-lex-rule & no-aux-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE past,
                                     EVID indirect ] ].

;;; Agreement

agreement-verb-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ AGREEMENT-FLAG +,
                ROLE-FLAG #role-flag,
                TENSE-FLAG #tense-flag,
                ASPECT-FLAG #aspect-flag,
                CASE-FLAG #case-flag,
                NUMBER-FLAG #number-flag,
                POLARITY-FLAG #polarity-flag ],
    DTR agreement-verb-rule-dtr &
        [ INFLECTED [ ROLE-FLAG #role-flag,
                      TENSE-FLAG #tense-flag,
                      ASPECT-FLAG #aspect-flag,
                      CASE-FLAG #case-flag,
                      NUMBER-FLAG #number-flag,
                      POLARITY-FLAG #polarity-flag ] ] ].

1sg-lex-rule := agreement-verb-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                NUM sg ] ].

1pl-lex-rule := agreement-verb-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                NUM pl ] ].

2sg-lex-rule := agreement-verb-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                NUM sg ] ].

2pl-lex-rule := agreement-verb-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                NUM pl ] ].

3sgpl-lex-rule := agreement-verb-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

3pl-lex-rule := agreement-verb-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                                                NUM pl ] ].
;;; Adjective role

basic-adjective-role-lex-rule-super := add-only-no-ccont-rule & const-lex-rule &
  [ INFLECTED [ ROLE-FLAG +,
                TENSE-FLAG #tense-flag,
                ASPECT-FLAG #aspect-flag,
                AGREEMENT-FLAG #agreement-flag,
                CASE-FLAG #case-flag,
                NUMBER-FLAG #number-flag,
                POLARITY-FLAG #polarity-flag ],
    DTR basic-adjective-role-rule-dtr &
        [ INFLECTED [ TENSE-FLAG #tense-flag,
                      ASPECT-FLAG #aspect-flag,
                      AGREEMENT-FLAG #agreement-flag,
                      CASE-FLAG #case-flag,
                      NUMBER-FLAG #number-flag,
                      POLARITY-FLAG #polarity-flag ] ] ].

basic-adjective-pred-role-lex-rule := basic-adjective-role-lex-rule-super & 
                                      stative-pred-lex-rule & tense-adjective-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD [ MOD < >,
                            PRD + ] ].

basic-adjective-attr-role-lex-rule := attr-adj-lex-rule & basic-adjective-role-lex-rule-super &
  [ SYNSEM.LOCAL.CAT [ VAL.SUBJ < >,
                       HEAD.PRD -,
                       POSTHEAD - ] ].

;;; Adjective tense

tense-adjective-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ TENSE-FLAG +,
                ROLE-FLAG #role-flag,
                ASPECT-FLAG #aspect-flag,
                AGREEMENT-FLAG #agreement-flag,
                CASE-FLAG #case-flag,
                NUMBER-FLAG #number-flag,
                POLARITY-FLAG #polarity-flag ],
    DTR tense-adjective-rule-dtr &
        [ INFLECTED [ ROLE-FLAG #role-flag,
                      ASPECT-FLAG #aspect-flag,
                      AGREEMENT-FLAG #agreement-flag,
                      CASE-FLAG #case-flag,
                      NUMBER-FLAG #number-flag,
                      POLARITY-FLAG #polarity-flag ] ] ].

pre-aux-adj-lex-rule := const-lex-rule & tense-adjective-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD [ FORM nonfinite, RAISED + ] ].

no-aux-adj-lex-rule := agreement-adjective-rule-dtr & tense-adjective-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.HEAD [ FORM finite, RAISED - ] ].

npst-adj-lex-rule := const-lex-rule & no-aux-adj-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE nonpast ].

direct-pst-adj-lex-rule := infl-lex-rule & no-aux-adj-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE past,
                                     EVID direct ] ].

indirect-pst-adj-lex-rule := infl-lex-rule & no-aux-adj-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E [ TENSE past,
                                     EVID indirect ] ].

;;; Adjective agreement

agreement-adjective-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ AGREEMENT-FLAG +,
                ROLE-FLAG #role-flag,
                TENSE-FLAG #tense-flag,
                ASPECT-FLAG #aspect-flag,
                CASE-FLAG #case-flag,
                NUMBER-FLAG #number-flag,
                POLARITY-FLAG #polarity-flag ],
    DTR agreement-adjective-rule-dtr &
        [ INFLECTED [ ROLE-FLAG #role-flag,
                      TENSE-FLAG #tense-flag,
                      ASPECT-FLAG #aspect-flag,
                      CASE-FLAG #case-flag,
                      NUMBER-FLAG #number-flag,
                      POLARITY-FLAG #polarity-flag ] ] ].

1sg-adj-lex-rule := agreement-adjective-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG [ PER 1st,
                                      NUM sg ] ].

1pl-adj-lex-rule := agreement-adjective-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG [ PER 1st,
                                      NUM pl ] ].

2sg-adj-lex-rule := agreement-adjective-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG [ PER 2nd,
                                      NUM sg ] ].

2pl-adj-lex-rule := agreement-adjective-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG [ PER 2nd,
                                      NUM pl ] ].

3sgpl-adj-lex-rule := agreement-adjective-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG.PER 3rd ].

3pl-adj-lex-rule := agreement-adjective-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG [ PER 3rd,
                                      NUM pl ] ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

head-initial-head-nexus := head-initial &
  [ SYNSEM.ATTACH lmod,
    HEAD-DTR.SYNSEM.ATTACH notmod-or-lmod ].

head-final-head-nexus := head-final &
  [ SYNSEM.ATTACH rmod ].

replacement-basic-head-opt-subj-phrase := head-valence-phrase & head-only & head-compositional &
  [ INFLECTED #infl,
    SYNSEM canonical-synsem &
           [ LOCAL [ CAT [ VAL [ SUBJ < >,
                                 COMPS #comps,
                                 SPR #spr,
                                 SPEC #spec ],
                           HEAD.RAISED -,
                           POSTHEAD #ph,
                           MC #mc ],
                     CONT.HOOK.INDEX.SF prop-or-ques ],
             NON-LOCAL.REL 0-dlist,
             MODIFIED #mod ],
    HEAD-DTR [ INFLECTED #infl & infl-satisfied,
               SYNSEM [ LOCAL [ CAT [ HEAD.MOD olist,
                                      VAL [ SUBJ < unexpressed-reg &
                                                   [ OPT +,
                                                     LOCAL.CONT.HOOK [ INDEX #index & [ COG-ST in-foc ],
                                                                       ICONS-KEY #ikey,
                                                                       CLAUSE-KEY #ckey ] ] >,
                                            COMPS #comps & < >,
                                            SPR #spr,
                                            SPEC #spec ],
                                      POSTHEAD #ph,
                                      MC #mc ],
                                CONT.HOOK [ INDEX #index2 & event,
                                            ICONS-KEY.IARG1 #index2,
                                            CLAUSE-KEY #index2 ] ],
                        NON-LOCAL.REL 0-dlist,
                        MODIFIED #mod ] ],
    C-CONT [ RELS <! !>,
             HCONS <! !>,
             ICONS <! #ikey & non-focus & [ IARG1 #ckey,
                                            IARG2 #index ] !> ] ].

replacement-basic-head-subj-phrase := head-valence-phrase & head-compositional & 
                                      basic-binary-headed-phrase &
  [ SYNSEM phr-synsem & 
           [ LOCAL.CAT [ POSTHEAD +,
                         HC-LIGHT -,
                         VAL [ SUBJ < >,
                               COMPS #comps,
                               SPR #spr ] ] ],
    C-CONT [ HOOK.INDEX.SF prop-or-ques,
             RELS <! !>,
             HCONS <! !>,
             ICONS <! !> ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.VAL [ SUBJ < #synsem >,
                                    COMPS #comps,    
                                    SPR #spr ],
    NON-HEAD-DTR.SYNSEM #synsem & canonical-synsem &
       [ LOCAL [ CAT [ VAL [ SUBJ olist,
                             COMPS olist,
                             SPR olist ] ] ],
         NON-LOCAL [ SLASH 0-dlist & [ LIST < > ],
                     REL 0-dlist ] ] ].

head-subj-phrase := replacement-basic-head-subj-phrase & head-initial-head-nexus &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD [ PRE-SUBJ +,
                                     RAISED - ] ].

subj-head-phrase := replacement-basic-head-subj-phrase & head-final-head-nexus &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD [ PRE-SUBJ -,
                                     RAISED - ] ].

; The head of head-comp-phrase can't be: ['adp']

head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus &
  [ SYNSEM.LOCAL.CAT.HEAD +nvjrcdmo & [ AUX - ],
    HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.PRE-COMPS +,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.PRE-COMPS -,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.PRE-COMPS +,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.PRE-COMPS -,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
;
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-initial &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.PRE-SPR -,
    NON-HEAD-DTR.SYNSEM [ OPT -,
                          LOCAL.CAT.HEAD.PRE-SPEC - ] ].

spec-head-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM [ OPT -,
                          LOCAL.CAT.HEAD.PRE-SPEC + ] ].

wh-int-cl := clause & head-compositional & head-only &
  [ SYNSEM [ LOCAL.CAT [ VAL #val,
                         MC bool ],
             NON-LOCAL non-local-none ],
    C-CONT [ RELS <! !>,
             HCONS <! !>,
             HOOK.INDEX.SF ques ],
    HEAD-DTR.SYNSEM [ LOCAL.CAT [ HEAD verb & [ FORM finite ],
                                  VAL #val & 
                                      [ SUBJ < >,
                                        COMPS < > ] ],
                      NON-LOCAL [ SLASH <! !>,
                                  REL <! !>,
                                  QUE <! ref-ind !> ] ] ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

bare-pronoun-np-phrase := bare-np-phrase &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.PRON + ].

bare-common-np-phrase := bare-np-phrase &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.PRON - ].

bare-poss-np-phrase := head-only & head-valence-phrase &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           SUBJ < >,
                           COMPS < >,
                           SPEC < > ],
    HEAD-DTR.SYNSEM [ LOCAL [ CAT [ HEAD +nvp,
                                    VAL [ SPR < unexpressed & 
                                                [ LOCAL [ CAT [ HEAD +nvp & [ CASE gen ] ],
                                                          CONT.HOOK.INDEX #arg2 ],
                                                  OPT + ] >,
                                          SUBJ < >,
                                          COMPS < > ] ],
                              CONT.HOOK [ INDEX #index,
                                          LTOP #larg ] ],
                      LKEYS.ALTKEYREL #altkeyrel ],
    C-CONT [ RELS <! quant-relation &
                     [ PRED "exist_q_rel",
                       ARG0 #index, 
                       RSTR #harg ],
                     quant-relation &
                     [ PRED "exist_q_rel",
                       ARG0 #arg2,
                       RSTR #harg2 ],
                     #altkeyrel & noun-relation &
                     [ PRED "pron_rel",             
                       LBL #larg2,
                       ARG0 #arg2 & [ COG-ST type-id,
                                      SPECI + ] ] !>,
             HCONS <! qeq & 
                      [ HARG #harg,
                        LARG #larg ],
                      qeq &
                      [ HARG #harg2,
                        LARG #larg2 ] !>,
             ICONS <! !>,
             HOOK [ INDEX #index ] ] ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination ambiguity fixing

bottom-coord-phrase :+
  [ SYNSEM.LOCAL.CAT.HEAD [ PRON #pron,
                            CASE #case,
                            CASE-MARKED #cm,
                            AUX #aux,
                            RAISED #raised ],
    NONCONJ-DTR.SYNSEM.LOCAL.CAT.HEAD [ PRON #pron,
                                        CASE #case,
                                        CASE-MARKED #cm,
                                        AUX #aux,
                                        RAISED #raised ] ].

binary-headlike-coord-phrase := coord-phrase & 
  [ SYNSEM.LOCAL.CAT.HEAD [ PRON #pron,
                            CASE #case,
                            CASE-MARKED #cm,
                            AUX #aux,
                            RAISED #raised ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT.HEAD [ PRON #pron,
                                       CASE #case,
                                       CASE-MARKED #cm,
                                       AUX #aux,
                                       RAISED #raised ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT.HEAD [ PRON #pron,
                                       CASE #case,
                                       CASE-MARKED #cm,
                                       AUX #aux,
                                       RAISED #raised ] ].

basic-n-top-coord-rule :+ binary-headlike-coord-phrase.
basic-n-mid-coord-rule :+ binary-headlike-coord-phrase.
basic-np-top-coord-rule :+ binary-headlike-coord-phrase.
basic-np-mid-coord-rule :+ binary-headlike-coord-phrase.
basic-vp-top-coord-rule :+ binary-headlike-coord-phrase.
basic-vp-mid-coord-rule :+ binary-headlike-coord-phrase.
basic-s-top-coord-rule :+ binary-headlike-coord-phrase.
basic-s-mid-coord-rule :+ binary-headlike-coord-phrase.

;;; Verb-headed coordination (matrix.tdl fix)

unary-bottom-coord-rule :+
  [ C-CONT.HOOK #hook,
    ARGS < [ SYNSEM.LOCAL.CONT.HOOK #hook ] > ].

binary-bottom-coord-rule :+
  [ C-CONT.HOOK #hook,
    NONCONJ-DTR.SYNSEM.LOCAL.CONT.HOOK #hook ].

;;; Feature Resolution Rules

1st-any-1st-per-coord-rule := coord-phrase &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st,
    LCOORD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

2nd-2nd-2nd-per-coord-rule := coord-phrase &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd,
    LCOORD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd,
    RCOORD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

2nd-3rd-2nd-per-coord-rule := coord-phrase &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd,
    LCOORD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd,
    RCOORD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

3rd-3rd-3rd-per-coord-rule := coord-phrase &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    LCOORD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    RCOORD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

any-1st-1st-per-coord-rule := coord-phrase &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st,
    RCOORD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

3rd-2nd-2nd-per-coord-rule := coord-phrase &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd,
    LCOORD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd,
    RCOORD-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

any-any-pl-num-coord-rule := coord-phrase &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].

pass-up-png-coord-rule := bottom-coord-phrase &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG #png,
    NONCONJ-DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG #png ].

;;; Coordination Strategy 1

n1-1st-any-1st-any-any-pl-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule & 1st-any-1st-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-1st-any-1st-any-any-pl-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule & 1st-any-1st-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-2nd-2nd-2nd-any-any-pl-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule & 2nd-2nd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-2nd-2nd-2nd-any-any-pl-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule & 2nd-2nd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-2nd-3rd-2nd-any-any-pl-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule & 2nd-3rd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-2nd-3rd-2nd-any-any-pl-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule & 2nd-3rd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-3rd-3rd-3rd-any-any-pl-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule & 3rd-3rd-3rd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-3rd-3rd-3rd-any-any-pl-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule & 3rd-3rd-3rd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-any-1st-1st-any-any-pl-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule & any-1st-1st-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-any-1st-1st-any-any-pl-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule & any-1st-1st-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-3rd-2nd-2nd-any-any-pl-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule & 3rd-2nd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-3rd-2nd-2nd-any-any-pl-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule & 3rd-2nd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase & pass-up-png-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

np1-1st-any-1st-any-any-pl-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule & 1st-any-1st-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-1st-any-1st-any-any-pl-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule & 1st-any-1st-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-2nd-2nd-2nd-any-any-pl-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule & 2nd-2nd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-2nd-2nd-2nd-any-any-pl-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule & 2nd-2nd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-2nd-3rd-2nd-any-any-pl-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule & 2nd-3rd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-2nd-3rd-2nd-any-any-pl-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule & 2nd-3rd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-3rd-3rd-3rd-any-any-pl-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule & 3rd-3rd-3rd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-3rd-3rd-3rd-any-any-pl-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule & 3rd-3rd-3rd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-any-1st-1st-any-any-pl-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule & any-1st-1st-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-any-1st-1st-any-any-pl-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule & any-1st-1st-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-3rd-2nd-2nd-any-any-pl-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule & 3rd-2nd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-3rd-2nd-2nd-any-any-pl-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule & 3rd-2nd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase & pass-up-png-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Feature Resolution Rules

;;; Coordination Strategy 2

n2-1st-any-1st-any-any-pl-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule & 1st-any-1st-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-2nd-2nd-2nd-any-any-pl-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule & 2nd-2nd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-2nd-3rd-2nd-any-any-pl-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule & 2nd-3rd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-3rd-3rd-3rd-any-any-pl-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule & 3rd-3rd-3rd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-any-1st-1st-any-any-pl-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule & any-1st-1st-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-3rd-2nd-2nd-any-any-pl-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule & 3rd-2nd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-bottom-coord-rule := unary-bottom-coord-rule & n-bottom-coord-phrase & pass-up-png-coord-rule &
  [ SYNSEM.LOCAL [ COORD-STRAT "2",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 2

np2-1st-any-1st-any-any-pl-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule & 1st-any-1st-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-2nd-2nd-2nd-any-any-pl-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule & 2nd-2nd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-2nd-3rd-2nd-any-any-pl-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule & 2nd-3rd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-3rd-3rd-3rd-any-any-pl-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule & 3rd-3rd-3rd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-any-1st-1st-any-any-pl-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule & any-1st-1st-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-3rd-2nd-2nd-any-any-pl-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule & 3rd-2nd-2nd-per-coord-rule & any-any-pl-num-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-bottom-coord-rule := unary-bottom-coord-rule & np-bottom-coord-phrase & pass-up-png-coord-rule &
  [ SYNSEM.LOCAL [ COORD-STRAT "2",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 3

vp3-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 3

s3-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

s3-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

s3-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 4

vp4-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-bottom-coord-rule := unary-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "4",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 4

s4-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

s4-bottom-coord-rule := unary-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "4",
                   COORD-REL.PRED "_and_coord_rel" ] ].
